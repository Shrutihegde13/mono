package mono

import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import akka.stream.scaladsl.Source
import cats.~>
import monix.cats.MonixToCatsConversions
import monix.eval.Task
import mono.bot.Incoming.{ Chat, Meta }
import mono.bot._
import mono.web.WebApp

import scala.io.StdIn
import scala.language.higherKinds

/*

пользовательские истории
- создать новое (в боте)
- получил ссылку на редактирование нового (жвт?)
- переход туда. там форма
- закопипастил текст
- ткнул предпросмотр, предпросмотрел
- сохранил черновик
- в боте сообщение "черновик сохранён, название, как редактировать"
- нажал опубликовать
- перекинуло на публикацию с постоянным адресом
- в боте сообщение с превью поста
- в боте +сообщение на редактирование

что ещё можно в боте?
- подписаться на обновления: /настройки -Ю ссылка на настройки
- список черновиков со ссылками на редактирование
- подписаться по ссылке на автора
- получить ссылку на редактирование по ссылке на текст

какие ключевые функции нужны?
- создание и проверка авторизационного токена
        (сначала можно без жвт, просто с палками, как инфраструктура. нужно: кто издал, какое действие, кто пользователь, когда истечёт)
- обработка данных с веб-фронта (от редактирования, можно плэйн жаваскрипт + ажакс)
- роботс.тхт с запретом на все технические урлы
- для автора и статьи доп. параметры из схемы.орг и соотв. микроразметка
- яндекс.дзен на всё опубликованное
- сайтмап.хмл на всё опубликованное
- атом.хмл и рсс.хмл на сайт и каждого автора

При этом сложные сценарии из бота -- выпиливаем.
После этого оформляем, добавляем постгрес, и в продакшн вместо мирари.

Дальше нужно картинки (можно через бота)
Дальше -- каналы/группы/сериалы
- канал если нету сообщества, но действует для всех
- группа -- канал с сообществом
- сериал -- личная группа с сортировкой
- тег -- личная группа без сортировки



как оно должно работать вообще?
- у нас есть статья. для неё -- круд.
  - добавить статью
  - предпросмотр по ссылке
  - публикация с анонсами
  - вывод списка -- заголовок, аннотация, мб картинка
  - вывод статьи -- заголовок, текст
  - редактирование -- заголовка или текста
  - поиск -- по строке, по автору
  - группировка как-нибудь
- есть пользователи. их на самом деле нет, поэтому пусть будут телеграммовские
- есть алиасы -- для проектов, пользователей, тегов-группировок
- есть проекты. несколько пользователей могут, по идее, писать в один проект.
- собираем статистику

отображение очень простое: лента, статья.
лента по пользователю. по поиску. по тегу. по проекту.


- Поля для страницы. Модель.
- Персистанс для страницы.
- Персистанс для автора.
- Пусть работает, проверить.
- Спроектировать флоу для публикации.
- Сделать и протестировать флоу.
- Поверстать страницы.
- Проекты-алиасы -- попробовать делать каналы.
- Написать мигратор из хттп-апи мирари
- Картинки: скачивать из телеграмма, мигрировать из мирари, показывать, ресайзить.
- Картинки в вёрстке.
- Аналитика/метрика в вёрстке.
- Релиз.
- Поиск в боте и в сайте.

 */

object MonoApp extends App with MonixToCatsConversions {
  println("hello mono")

  implicit val interpret: Interpret.Op ~> Task = Interpret.inMemory

  implicit val system = ActorSystem("mono")
  implicit val mat = ActorMaterializer()

  val bot = new MonoBot(
    script = BotScript(),
    interpreter = _ or interpret
  )

  val web = new WebApp[Interpret.Op]

  bot.run()

  web.run()

  Source.repeat(())
    .map(_ ⇒ Incoming.console(StdIn.readLine()))
    .runWith(BotProcessor(BotScript(), BotConsoleInterpreter or interpret))

}

